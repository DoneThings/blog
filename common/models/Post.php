<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "post".
 *
 * @property int $id
 * @property string $title
 * @property string $content
 * @property string $tags
 * @property int $status
 * @property int $create_time
 * @property int $update_time
 * @property int $author_id
 *
 * @property Comment[] $comments
 * @property Adminuser $author
 * @property Poststatus $status0
 */
class Post extends SActiveRecord
{
    private $_old_tags;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'post';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'content', 'status', 'author_id'], 'required'],
            [['content', 'tags'], 'string'],
            [['status', 'create_time', 'update_time', 'author_id'], 'integer'],
            [['title'], 'string', 'max' => 128],
            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => Adminuser::className(), 'targetAttribute' => ['author_id' => 'id']],
            [['status'], 'exist', 'skipOnError' => true, 'targetClass' => Poststatus::className(), 'targetAttribute' => ['status' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => '标题',
            'content' => '内容',
            'tags' => '标签',
            'status' => '状态',
            'create_time' => '创建时间',
            'update_time' => '更新时间',
            'author_id' => '作者',
        ];
    }


    public function addTags($tags)
    {
        if (empty($tags)) return;

        foreach ($tags as $name) {
            $aTag = Tag::find()->where(['name' => $name])->one();
            if (empty($aTag)) {
                $tag = new Tag();
                $tag->name = $name;
                $tag->frequency = 1;
                $tag->save();
            } else {
                $aTag->frequency += 1;
                $aTag->save();
            }
        }
    }

    public function removeTags($tags)
    {
        if (empty($tags)) return;

        foreach ($tags as $name) {
            $aTag = Tag::find()->where(['name' => $name])->one();
            if (empty($aTag)) {
                
            } elseif ($aTag->frequency <= 1) {
                $aTag->delete();
            } else {
                $aTag->frequency -= 1;
                $aTag->save();
            }
        }
    }

    public function updateTagFrequency($oldTags, $newTags)
    {
        if (empty($oldTags) && empty($newTags)) return;

        $oldTagArray = explode(',', $oldTags);
        $newTagArray = explode(',', $newTags);

        $this->addTags(array_values(array_diff($newTagArray, $oldTagArray)));
        $this->removeTags(array_values(array_diff($oldTagArray, $newTagArray)));
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        $this->updateTagFrequency($this->_old_tags, $this->tags);
    }

    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
        $this->updateTagFrequency($this->_old_tags, '');
}

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->_old_tags = $this->tags;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::class, ['post_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(Adminuser::class, ['id' => 'author_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStatus0()
    {
        return $this->hasOne(Poststatus::class, ['id' => 'status']);
    }

    /**
     * @inheritdoc
     * @return \common\models\querys\PostQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\querys\PostQuery(get_called_class());
    }
}
